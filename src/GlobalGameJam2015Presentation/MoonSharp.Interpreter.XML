<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MoonSharp.Interpreter</name>
    </assembly>
    <members>
        <member name="T:MoonSharp.Interpreter.Interop.LuaStateInterop.LuaBase">
            <summary>
            Classes using the classic interface should inherit from this class.
            This class defines only static methods and is really meant to be used only
            from C# and not other .NET languages. 
            
            For easier operation they should also define:
            	using ptrdiff_t = System.Int32;
            	using lua_Integer = System.Int32;
            	using LUA_INTFRM_T = System.Int64;
            	using UNSIGNED_LUA_INTFRM_T = System.UInt64;
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.LuaBase.LuaCall(MoonSharp.Interpreter.Interop.LuaStateInterop.LuaState,System.Int32,System.Int32)">
            <summary>
            Calls a function.
            To call a function you must use the following protocol: first, the function to be called is pushed onto the stack; then,
            the arguments to the function are pushed in direct order; that is, the first argument is pushed first. Finally you call
            lua_call; nargs is the number of arguments that you pushed onto the stack. All arguments and the function value are
            popped from the stack when the function is called. The function results are pushed onto the stack when the function
            returns. The number of results is adjusted to nresults, unless nresults is LUA_MULTRET. In this case, all results from
            the function are pushed. Lua takes care that the returned values fit into the stack space. The function results are
            pushed onto the stack in direct order (the first result is pushed first), so that after the call the last result is on
            the top of the stack.
            </summary>
            <param name="L">The LuaState</param>
            <param name="nargs">The number of arguments.</param>
            <param name="nresults">The number of expected results.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.InteropRegistrationPolicy">
            <summary>
            Enumerations of the possible policies to handle UserData type registrations
            See also : <seealso cref="T:MoonSharp.Interpreter.UserData"/> .
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.InteropRegistrationPolicy.Explicit">
            <summary>
            Types must be explicitly registered. If a base type or interface is registered, that is used.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.InteropRegistrationPolicy.Automatic">
            <summary>
            Types are automatically registered if not found in the registry. This is easier to use but potentially unsafe.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.TypeValidationFlags">
            <summary>
            Flags to alter the way the DynValue.CheckType and other related functions operate on data types for
            validation.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.TypeValidationFlags.None">
            <summary>
            No type validation specific behaviour
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.TypeValidationFlags.AllowNil">
            <summary>
            Nil and Void values are allowed (and returned by the call)
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.TypeValidationFlags.AutoConvert">
            <summary>
            Simple autoconversions are attempted: 
            1) Numbers are convertible to strings
            2) Strings are convertible to numbers if they contain a number
            3) Everything is convertible to boolean (with void and nil converting to 'false', everything else converting to 'true')
            Note: if both AutoConvert and AllowNil are specified, nils will NOT be converted to false booleans.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.TypeValidationFlags.Default">
            <summary>
            The default : Autoconverting values, no nils.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.DynamicExpression">
            <summary>
            Represents a dynamic expression in the script
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.IScriptPrivateResource">
            <summary>
            Common interface for all resources which are uniquely bound to a script.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.IScriptPrivateResource.OwnerScript">
            <summary>
            Gets the script owning this resource.
            </summary>
            <value>
            The script owning this resource.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.IsNumericType(System.Object)">
            <summary>
            Determines whether the specified value is of numeric type.
            </summary>
            <param name="o">The object to check.</param>
            <returns>
            	<c>true</c> if o is a numeric type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.IsPositive(System.Object,System.Boolean)">
            <summary>
            Determines whether the specified value is positive.
            </summary>
            <param name="Value">The value.</param>
            <param name="ZeroIsPositive">if set to <c>true</c> treats 0 as positive.</param>
            <returns>
            	<c>true</c> if the specified value is positive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.ToUnsigned(System.Object)">
            <summary>
            Converts the specified values boxed type to its correpsonding unsigned
            type.
            </summary>
            <param name="Value">The value.</param>
            <returns>A boxed numeric object whos type is unsigned.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.ToInteger(System.Object,System.Boolean)">
            <summary>
            Converts the specified values boxed type to its correpsonding integer
            type.
            </summary>
            <param name="Value">The value.</param>
            <param name="Round">if set to <c>true</c> [round].</param>
            <returns>
            A boxed numeric object whos type is an integer type.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.ReplaceMetaChars(System.String)">
            <summary>
            Replaces the string representations of meta chars with their corresponding
            character values.
            </summary>
            <param name="input">The input.</param>
            <returns>A string with all string meta chars are replaced</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Extension_Methods">
            <summary>
            Extension methods used in the whole project.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Extension_Methods.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary or returns the default value
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2">
            <summary>
            An index to accelerate operations on a LinkedList<typeparamref name="TValue"/> using a single key of type <typeparamref name="TKey"/>
            More than one LinkedListIndex can index the same linked list, but every node in the linked list must be indexed by one and only one
            LinkedListIndex object.
            </summary>
            <typeparam name="TKey">The type of the key. Must implement Equals and GetHashCode appropriately.</typeparam>
            <typeparam name="TValue">The type of the values contained in the linked list.</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.#ctor(System.Collections.Generic.LinkedList{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2"/> class.
            </summary>
            <param name="linkedList">The linked list to be indexed.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.Find(`0)">
            <summary>
            Finds the node indexed by the specified key, or null.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.Set(`0,`1)">
            <summary>
            Updates or creates a new node in the linked list, indexed by the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The previous value of the element</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.Add(`0,`1)">
            <summary>
            Creates a new node in the linked list, indexed by the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.Remove(`0)">
            <summary>
            Removes the specified key from the index, and the node indexed by the key from the linked list.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.ContainsKey(`0)">
            <summary>
            Determines whether the index contains the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.DataStructs.Slice`1">
            <summary>
            Provides facility to create a "sliced" view over an existing IList<typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the items contained in the collection</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.DataStructs.Slice`1"/> class.
            </summary>
            <param name="list">The list to apply the Slice view on</param>
            <param name="from">From which index</param>
            <param name="length">The length of the slice</param>
            <param name="reversed">if set to <c>true</c> the view is in reversed order.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.CalcRealIndex(System.Int32)">
            <summary>
            Calculates the real index in the underlying collection
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.ToArray">
            <summary>
            Converts to an array.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.ToList">
            <summary>
            Converts to an list.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.From">
            <summary>
            Gets the index from which the slice starts
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.Reversed">
            <summary>
            Gets a value indicating whether this <see cref="T:MoonSharp.Interpreter.DataStructs.Slice`1"/> operates in a reversed direction.
            </summary>
            <value>
              <c>true</c> if this <see cref="T:MoonSharp.Interpreter.DataStructs.Slice`1"/> operates in a reversed direction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.WellKnownSymbols">
            <summary>
            Constants of well known "symbols" in the MoonSharp grammar
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.WellKnownSymbols.VARARGS">
            <summary>
            The variadic argument symbol ("...")
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.WellKnownSymbols.ENV">
            <summary>
            The environment symbol ("_ENV")
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.IDebugger">
            <summary>
            Interface for debuggers to implement, in order to provide debugging facilities to Scripts.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.SetSourceCode(MoonSharp.Interpreter.Debugging.SourceCode)">
            <summary>
            Called by the script engine  when a source code is added or changed.
            </summary>
            <param name="sourceCode">The source code object.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.SetByteCode(System.String[])">
            <summary>
            Called by the script engine  when the bytecode changes.
            </summary>
            <param name="byteCode">The bytecode source</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.IsPauseRequested">
            <summary>
            Called by the script engine at execution time to check if a break has 
            been requested. Should return pretty fast as it's called A LOT.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.SignalRuntimeException(MoonSharp.Interpreter.ScriptRuntimeException)">
            <summary>
            Called by the script engine when a runtime error occurs. 
            The debugger can return true to signal the engine that it wants to break 
            into the source of the error. If it does so, it should also return true 
            to subsequent calls to IsPauseRequested().
            </summary>
            <param name="ex">The runtime exception.</param>
            <returns>True if this error should break execution.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.GetAction(System.Int32,MoonSharp.Interpreter.Debugging.SourceRef)">
            <summary>
            Called by the script engine to get what action to do next.
            </summary>
            <param name="ip">The instruction pointer in bytecode.</param>
            <param name="sourceref">The source reference.</param>
            <returns>T</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.SignalExecutionEnded">
            <summary>
            Called by the script engine when the execution ends.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.Update(MoonSharp.Interpreter.Debugging.WatchType,System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.Debugging.WatchItem})">
            <summary>
            Called by the script engine to update watches of a given type. Note 
            that this method is not called only for watches in the strictest term, 
            but also for the stack, etc.
            </summary>
            <param name="watchType">Type of the watch.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.GetWatchItems">
            <summary>
            Called by the script engine to get which expressions are active 
            watches in the debugger.
            </summary>
            <returns>A list of watches</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.RefreshBreakpoints(System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.Debugging.SourceRef})">
            <summary>
            Called by the script engine to refresh the breakpoint list.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceCounters.GlobalPerformanceStopwatch">
            <summary>
            This class is not *really* IDisposable.. it's just use to have a RAII like pattern.
            You are free to reuse this instance after calling Dispose.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics">
            <summary>
            A single object of this type exists for every script and gives access to performance statistics.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.GetPerformanceCounterResult(MoonSharp.Interpreter.Diagnostics.PerformanceCounter)">
            <summary>
            Gets the result of the specified performance counter .
            </summary>
            <param name="pc">The PerformanceCounter.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.StartStopwatch(MoonSharp.Interpreter.Diagnostics.PerformanceCounter)">
            <summary>
            Starts a stopwatch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.StartGlobalStopwatch(MoonSharp.Interpreter.Diagnostics.PerformanceCounter)">
            <summary>
            Starts a stopwatch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.GetPerformanceLog">
            <summary>
            Gets a string with a complete performance log.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.Enabled">
            <summary>
            Gets or sets a value indicating whether this collection of performance stats is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceResult">
            <summary>
            The result of a performance counter
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceResult.PerformanceCounterTypeToString(MoonSharp.Interpreter.Diagnostics.PerformanceCounterType)">
            <summary>
            Converts a PerformanceCounterType to a string.
            </summary>
            <param name="Type">The type.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Name">
            <summary>
            Gets the name of the performance counter which generated this result.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Counter">
            <summary>
            Gets the quantity monitored - see Type to understand what this field contains
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Instances">
            <summary>
            Gets the number of instances which led to the specified counter being incremented - e.g. the times a specific
            code is executed, or object instanced
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Global">
            <summary>
            Gets a value indicating whether this <see cref="T:MoonSharp.Interpreter.Diagnostics.PerformanceResult"/> is global or relative to the resource
            for which it's called.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Type">
            <summary>
            Gets the unit of measure of the Counter field.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceCounters.PerformanceStopwatch">
            <summary>
            This class is not *really* IDisposable.. it's just use to have a RAII like pattern.
            You are free to reuse this instance after calling Dispose.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CallbackArguments">
            <summary>
            This class is a container for arguments received by a CallbackFunction
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.#ctor(System.Collections.Generic.IList{MoonSharp.Interpreter.DynValue},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.CallbackArguments"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="isMethodCall">if set to <c>true</c> [is method call].</param>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.RawGet(System.Int32,System.Boolean)">
            <summary>
            Gets the <see cref="T:MoonSharp.Interpreter.DynValue"/> at the specified index, or null.
            </summary>
            <param name="index">The index.</param>
            <param name="translateVoids">if set to <c>true</c> all voids are translated to nils.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.GetArray(System.Int32)">
            <summary>
            Converts the arguments to an array
            </summary>
            <param name="skip">The number of elements to skip (default= 0).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.AsType(System.Int32,System.String,MoonSharp.Interpreter.DataType,System.Boolean)">
            <summary>
            Gets the specified argument as as an argument of the specified type. If not possible,
            an exception is raised.
            </summary>
            <param name="argNum">The argument number.</param>
            <param name="funcName">Name of the function.</param>
            <param name="type">The type desired.</param>
            <param name="allowNil">if set to <c>true</c> nil values are allowed.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.AsUserData``1(System.Int32,System.String,System.Boolean)">
            <summary>
            Gets the specified argument as as an argument of the specified user data type. If not possible,
            an exception is raised.
            </summary>
            <typeparam name="T">The desired userdata type</typeparam>
            <param name="argNum">The argument number.</param>
            <param name="funcName">Name of the function.</param>
            <param name="allowNil">if set to <c>true</c> nil values are allowed.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.AsInt(System.Int32,System.String)">
            <summary>
            Gets the specified argument as an integer
            </summary>
            <param name="argNum">The argument number.</param>
            <param name="funcName">Name of the function.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.AsStringUsingMeta(MoonSharp.Interpreter.Execution.ScriptExecutionContext,System.Int32,System.String)">
            <summary>
            Gets the specified argument as a string, calling the __tostring metamethod if needed, in a NON
            yield-compatible way.
            </summary>
            <param name="executionContext">The execution context.</param>
            <param name="argNum">The argument number.</param>
            <param name="funcName">Name of the function.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">'tostring' must return a string to '{0}'</exception>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackArguments.Count">
            <summary>
            Gets the count of arguments
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackArguments.IsMethodCall">
            <summary>
            Gets or sets a value indicating whether this is a method call.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackArguments.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MoonSharp.Interpreter.DynValue"/> at the specified index, or Nil if not found (mimicing Lua behavior)
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Closure">
            <summary>
            A class representing a script function
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Closure.emptyClosure">
            <summary>
            Shortcut for an empty closure
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.#ctor(MoonSharp.Interpreter.Script,System.Int32,MoonSharp.Interpreter.SymbolRef[],System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.DynValue})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Closure"/> class.
            </summary>
            <param name="script">The script.</param>
            <param name="idx">The index.</param>
            <param name="symbols">The symbols.</param>
            <param name="resolvedLocals">The resolved locals.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.Call">
            <summary>
            Calls this function with the specified args
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.Call(System.Object[])">
            <summary>
            Calls this function with the specified args
            </summary>
            <param name="args">The arguments to pass to the function.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.Call(MoonSharp.Interpreter.DynValue[])">
            <summary>
            Calls this function with the specified args
            </summary>
            <param name="args">The arguments to pass to the function.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.GetDelegate">
            <summary>
            Gets a delegate wrapping calls to this scripted function
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.GetDelegate``1">
            <summary>
            Gets a delegate wrapping calls to this scripted function
            </summary>
            <typeparam name="T">The type of return value of the delegate.</typeparam>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Closure.EntryPointByteCodeLocation">
            <summary>
            Gets the entry point location in bytecode .
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Closure.ClosureContext">
            <summary>
            Gets the ClosureContext for upvalues of this function
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Closure.OwnerScript">
            <summary>
            Gets the script owning this function
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CallbackFunction">
            <summary>
            This class wraps 
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackFunction.#ctor(System.Func{MoonSharp.Interpreter.Execution.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments,MoonSharp.Interpreter.DynValue},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.CallbackFunction"/> class.
            </summary>
            <param name="callBack">The callback function to be called.</param>
            <param name="name">The callback name, used in stacktraces, debugger, etc..</param>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackFunction.Invoke(MoonSharp.Interpreter.Execution.ScriptExecutionContext,System.Collections.Generic.IList{MoonSharp.Interpreter.DynValue},System.Boolean)">
            <summary>
            Invokes the callback function
            </summary>
            <param name="executionContext">The execution context.</param>
            <param name="args">The arguments.</param>
            <param name="isMethodCall">if set to <c>true</c> this is a method call.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackFunction.FromDelegate(MoonSharp.Interpreter.Script,System.Delegate,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Creates a CallbackFunction from a delegate.
            </summary>
            <param name="script">The script.</param>
            <param name="del">The delegate.</param>
            <param name="accessMode">The access mode.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackFunction.FromMethodInfo(MoonSharp.Interpreter.Script,System.Reflection.MethodInfo,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Creates a CallbackFunction from a MethodInfo relative to a static function.
            </summary>
            <param name="script">The script.</param>
            <param name="mi">The MethodInfo object.</param>
            <param name="accessMode">The access mode.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The method is not static.</exception>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackFunction.DefaultAccessMode">
            <summary>
            Gets or sets the default access mode used when marshalling delegates
            </summary>
            <value>
            The default access mode. Default, HideMembers and BackgroundOptimized are NOT supported.
            </value>
            <exception cref="T:System.ArgumentException">Default, HideMembers and BackgroundOptimized are NOT supported.</exception>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackFunction.AdditionalData">
            <summary>
            Gets or sets an object used as additional data to the callback function (available in the execution context).
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.DynValue">
            <summary>
            A class representing a value in a Lua/MoonSharp script.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewNil">
            <summary>
            Creates a new writable value initialized to Nil.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewBoolean(System.Boolean)">
            <summary>
            Creates a new writable value initialized to the specified boolean.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewNumber(System.Double)">
            <summary>
            Creates a new writable value initialized to the specified number.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewString(System.String)">
            <summary>
            Creates a new writable value initialized to the specified string.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewString(System.Text.StringBuilder)">
            <summary>
            Creates a new writable value initialized to the specified StringBuilder.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewString(System.String,System.Object[])">
            <summary>
            Creates a new writable value initialized to the specified string using String.Format like syntax
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewCoroutine(MoonSharp.Interpreter.Coroutine)">
            <summary>
            Creates a new writable value initialized to the specified coroutine.
            Internal use only, for external use, see Script.CoroutineCreate
            </summary>
            <param name="coroutine">The coroutine object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewClosure(MoonSharp.Interpreter.Closure)">
            <summary>
            Creates a new writable value initialized to the specified closure (function).
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewCallback(System.Func{MoonSharp.Interpreter.Execution.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments,MoonSharp.Interpreter.DynValue},System.String)">
            <summary>
            Creates a new writable value initialized to the specified CLR callback.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewCallback(MoonSharp.Interpreter.CallbackFunction)">
            <summary>
            Creates a new writable value initialized to the specified CLR callback.
            See also CallbackFunction.FromDelegate and CallbackFunction.FromMethodInfo factory methods.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTable(MoonSharp.Interpreter.Table)">
            <summary>
            Creates a new writable value initialized to the specified table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTable(MoonSharp.Interpreter.Script)">
            <summary>
            Creates a new writable value initialized to an empty table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTailCallReq(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue[])">
            <summary>
            Creates a new request for a tail call. This is the preferred way to execute Lua/MoonSharp code from a callback,
            although it's not always possible to use it. When a function (callback or script closure) returns a
            TailCallRequest, the bytecode processor immediately executes the function contained in the request.
            By executing script in this way, a callback function ensures it's not on the stack anymore and thus a number
            of functionality (state savings, coroutines, etc) keeps working at full power.
            </summary>
            <param name="tailFn">The function to be called.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTailCallReq(MoonSharp.Interpreter.TailCallData)">
            <summary>
            Creates a new request for a tail call. This is the preferred way to execute Lua/MoonSharp code from a callback,
            although it's not always possible to use it. When a function (callback or script closure) returns a
            TailCallRequest, the bytecode processor immediately executes the function contained in the request.
            By executing script in this way, a callback function ensures it's not on the stack anymore and thus a number
            of functionality (state savings, coroutines, etc) keeps working at full power.
            </summary>
            <param name="tailCallData">The data for the tail call.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewYieldReq(MoonSharp.Interpreter.DynValue[])">
            <summary>
            Creates a new request for a yield of the current coroutine.
            </summary>
            <param name="args">The yield argumenst.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTuple(MoonSharp.Interpreter.DynValue[])">
            <summary>
            Creates a new tuple initialized to the specified values.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTupleNested(MoonSharp.Interpreter.DynValue[])">
            <summary>
            Creates a new tuple initialized to the specified values - which can be potentially other tuples
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewUserData(MoonSharp.Interpreter.UserData)">
            <summary>
            Creates a new userdata value
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.AsReadOnly">
            <summary>
            Returns this value as readonly - eventually cloning it in the process if it isn't readonly to start with.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CloneAsWritable">
            <summary>
            Clones this instance, returning a writable copy.
            </summary>
            <exception cref="T:System.ArgumentException">Can't clone Symbol values</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToPrintString">
            <summary>
            Returns a string which is what it's expected to be output by the print function applied to this value.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CastToString">
            <summary>
            Casts this DynValue to string, using coercion if the type is number.
            </summary>
            <returns>The string representation, or null if not number, not string.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CastToNumber">
            <summary>
            Casts this DynValue to a double, using coercion if the type is string.
            </summary>
            <returns>The string representation, or null if not number, not string or non-convertible-string.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CastToBool">
            <summary>
            Casts this DynValue to a bool
            </summary>
            <returns>False if value is false or nil, true otherwise.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToScalar">
            <summary>
            Converts a tuple to a scalar value. If it's already a scalar value, this function returns "this".
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.Assign(MoonSharp.Interpreter.DynValue)">
            <summary>
            Performs an assignment, overwriting the value with the specified one.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">If the value is readonly.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.GetLength">
            <summary>
            Gets the length of a string or table value.
            </summary>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">Value is not a table or string.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsNil">
            <summary>
            Determines whether this instance is nil or void
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsNotNil">
            <summary>
            Determines whether this instance is not nil or void
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsVoid">
            <summary>
            Determines whether this instance is void
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsNotVoid">
            <summary>
            Determines whether this instance is not void
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsNilOrNan">
            <summary>
            Determines whether is nil, void or NaN (and thus unsuitable for using as a table key).
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.AssignNumber(System.Double)">
            <summary>
            Changes the numeric value of a number DynValue.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.FromObject(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Creates a new DynValue from a CLR object
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToObject">
            <summary>
            Converts this MoonSharp DynValue to a CLR object.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToObject``1">
            <summary>
            Converts this MoonSharp DynValue to a CLR object of the specified type.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CheckType(System.String,MoonSharp.Interpreter.DataType,System.Int32,MoonSharp.Interpreter.TypeValidationFlags)">
            <summary>
            Checks the type of this value corresponds to the desired type. A propert ScriptRuntimeException is thrown
            if the value is not of the specified type or - considering the TypeValidationFlags - is not convertible
            to the specified type.
            </summary>
            <param name="funcName">Name of the function requesting the value, for error message purposes.</param>
            <param name="desiredType">The desired data type.</param>
            <param name="argNum">The argument number, for error message purposes.</param>
            <param name="flags">The TypeValidationFlags.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">Thrown
            if the value is not of the specified type or - considering the TypeValidationFlags - is not convertible
            to the specified type.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CheckUserDataType``1(System.String,System.Int32,MoonSharp.Interpreter.TypeValidationFlags)">
            <summary>
            Checks if the type is a specific userdata type, and returns it or throws.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="funcName">Name of the function.</param>
            <param name="argNum">The argument number.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.ReferenceID">
            <summary>
            Gets a unique reference identifier. This is guaranteed to be unique only in a single Script object as it's not thread-safe.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Type">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Function">
            <summary>
            Gets the function (valid only if the <seealso cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <seealso cref="F:MoonSharp.Interpreter.DataType.Function"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Number">
            <summary>
            Gets the numeric value (valid only if the <seealso cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <seealso cref="F:MoonSharp.Interpreter.DataType.Number"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Tuple">
            <summary>
            Gets the values in the tuple (valid only if the <seealso cref="P:MoonSharp.Interpreter.DynValue.Type"/> is Tuple).
            This field is currently also used to hold arguments in values whose <seealso cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <seealso cref="F:MoonSharp.Interpreter.DataType.TailCallRequest"/>.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Coroutine">
            <summary>
            Gets the coroutine handle. (valid only if the <seealso cref="P:MoonSharp.Interpreter.DynValue.Type"/> is Thread).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Table">
            <summary>
            Gets the table (valid only if the <seealso cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <seealso cref="F:MoonSharp.Interpreter.DataType.Table"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Boolean">
            <summary>
            Gets the boolean value (valid only if the <seealso cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <seealso cref="F:MoonSharp.Interpreter.DataType.Boolean"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.String">
            <summary>
            Gets the string value (valid only if the <seealso cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <seealso cref="F:MoonSharp.Interpreter.DataType.String"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Callback">
            <summary>
            Gets the CLR callback (valid only if the <seealso cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <seealso cref="F:MoonSharp.Interpreter.DataType.ClrFunction"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.TailCallData">
            <summary>
            Gets the tail call data.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.YieldRequest">
            <summary>
            Gets the yield request data.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.UserData">
            <summary>
            Gets the tail call data.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.ReadOnly">
            <summary>
            Returns true if this instance is write protected.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Void">
            <summary>
            A preinitialized, readonly instance, equaling Void
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Nil">
            <summary>
            A preinitialized, readonly instance, equaling Nil
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.True">
            <summary>
            A preinitialized, readonly instance, equaling True
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.False">
            <summary>
            A preinitialized, readonly instance, equaling False
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.TablePair">
            <summary>
            A class representing a key/value pair for Table use
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.TablePair.#ctor(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.TablePair"/> struct.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.TablePair.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.TablePair.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.TablePair.Nil">
            <summary>
            Gets the nil pair
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Execution.ScriptExecutionContext">
            <summary>
            Class giving access to details of the environment where the script is executing
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.GetMetatable(MoonSharp.Interpreter.DynValue)">
            <summary>
            Gets the metatable associated with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.GetMetamethod(MoonSharp.Interpreter.DynValue,System.String)">
            <summary>
            Gets the specified metamethod associated with the given value.
            </summary>
            <param name="value">The value.</param>
            <param name="metamethod">The metamethod name.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.GetMetamethodTailCall(MoonSharp.Interpreter.DynValue,System.String,MoonSharp.Interpreter.DynValue[])">
            <summary>
            prepares a tail call request for the specified metamethod, or null if no metamethod is found.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.GetBinaryMetamethod(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue,System.String)">
            <summary>
            Gets the metamethod to be used for a binary operation using op1 and op2.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.GetScript">
            <summary>
            Gets the script object associated with this request
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.GetCallingCoroutine">
            <summary>
            Gets the coroutine which is performing the call
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.EmulateClassicCall(MoonSharp.Interpreter.CallbackArguments,System.String,System.Func{MoonSharp.Interpreter.Interop.LuaStateInterop.LuaState,System.Int32})">
            <summary>
            Calls a callback function implemented in "classic way". 
            Useful to port C code from Lua, or C# code from UniLua and KopiLua.
            Lua : http://www.lua.org/
            UniLua : http://github.com/xebecnan/UniLua
            KopiLua : http://github.com/NLua/KopiLua
            </summary>
            <param name="args">The arguments.</param>
            <param name="functionName">Name of the function - for error messages.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.Call(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue[])">
            <summary>
            Calls the specified function, supporting most cases. The called function must not yield.
            </summary>
            <param name="func">The function; it must be a Function or ClrFunction or have a call metamethod defined.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">If the function yields, returns a tail call request with continuations/handlers or, of course, if it encounters errors.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.EvaluateSymbol(MoonSharp.Interpreter.SymbolRef)">
            <summary>
            Tries to get the reference of a symbol in the current execution state
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.EvaluateSymbolByName(System.String)">
            <summary>
            Tries to get the value of a symbol in the current execution state
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.FindSymbolByName(System.String)">
            <summary>
            Finds a symbol by name in the current execution state
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Execution.ScriptExecutionContext.PerformMessageDecorationBeforeUnwind(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.ScriptRuntimeException)">
            <summary>
            Performs a message decoration before unwinding after an error. To be used in the implementation of xpcall like functions.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Execution.ScriptExecutionContext.CallingLocation">
            <summary>
            Gets the location of the code calling back 
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Execution.ScriptExecutionContext.AdditionalData">
            <summary>
            Gets or sets the additional data associated to this CLR function call.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Execution.ScriptExecutionContext.CurrentGlobalEnv">
            <summary>
            Gets the current global env, or null if not found.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.LinqHelpers">
            <summary>
            LINQ helper methods
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.LuaStateInterop.LuaState">
            <summary>
            
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.InteropAccessMode">
            <summary>
            Enumerations of the possible strategies to marshal CLR objects to MoonSharp userdata and functions
            when using automatic descriptors.
            See also : <seealso cref="T:MoonSharp.Interpreter.CallbackFunction"/> and <seealso cref="T:MoonSharp.Interpreter.UserData"/> .
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.Reflection">
            <summary>
            Optimization is not performed and reflection is used everytime to access members.
            This is the slowest approach but saves a lot of memory if members are seldomly used.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.LazyOptimized">
            <summary>
            Optimization is done on the fly the first time a member is accessed.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.Preoptimized">
            <summary>
            Optimization is done at registration time
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.BackgroundOptimized">
            <summary>
            Optimization is done in a background thread which starts at registration time. 
            If a member is accessed before optimization is completed, reflection is used.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.HideMembers">
            <summary>
            No optimization is done, and members are not accessible at all.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.Default">
            <summary>
            Use the default access mode
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.SymbolRef">
            <summary>
            This class stores a possible l-value (that is a potential target of an assignment)
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.DataType">
            <summary>
            Enumeration of possible data types in MoonSharp
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Nil">
            <summary>
            A nil value, as in Lua
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Void">
            <summary>
            A place holder for no value
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Boolean">
            <summary>
            A Lua boolean
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Number">
            <summary>
            A Lua number
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.String">
            <summary>
            A Lua string
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Function">
            <summary>
            A Lua function
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Table">
            <summary>
            A Lua table
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Tuple">
            <summary>
            A set of multiple values
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.UserData">
            <summary>
            A userdata reference - that is a wrapped CLR object
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Thread">
            <summary>
            A coroutine handle
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.ClrFunction">
            <summary>
            A callback function
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.TailCallRequest">
            <summary>
            A request to execute a tail call
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.YieldRequest">
            <summary>
            A request to coroutine.yield
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.LuaTypeExtensions">
            <summary>
            Extension methods to DataType
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.LuaTypeExtensions.CanHaveTypeMetatables(MoonSharp.Interpreter.DataType)">
            <summary>
            Determines whether this data type can have type metatables.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.LuaTypeExtensions.ToErrorTypeString(MoonSharp.Interpreter.DataType)">
            <summary>
            Converts the DataType to the string returned by the "type(...)" Lua function
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">The DataType is not a Lua type</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.LuaTypeExtensions.ToLuaDebuggerString(MoonSharp.Interpreter.DataType)">
            <summary>
            Converts the DataType to the string returned by the "type(...)" Lua function, with additional values
            to support debuggers
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">The DataType is not a Lua type</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.LuaTypeExtensions.ToLuaTypeString(MoonSharp.Interpreter.DataType)">
            <summary>
            Converts the DataType to the string returned by the "type(...)" Lua function
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">The DataType is not a Lua type</exception>
        </member>
        <member name="T:MoonSharp.Interpreter.Script">
            <summary>
            This class implements a MoonSharp scripting session. Multiple Script objects can coexist in the same program but cannot share
            data among themselves unless some mechanism is put in place.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Script.VERSION">
            <summary>
            The version of the MoonSharp engine
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Script.LUA_VERSION">
            <summary>
            The Lua version being supported
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Script"/> class.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.#ctor(MoonSharp.Interpreter.CoreModules)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Script"/> class.
            </summary>
            <param name="coreModules">The core modules to be pre-registered in the default global table.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.LoadFunction(System.String,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads a string containing a Lua/MoonSharp function.
            </summary>
            <param name="code">The code.</param>
            <param name="globalTable">The global table to bind to this chunk.</param>
            <param name="funcFriendlyName">Name of the function used to report errors, etc.</param>
            <returns>
            A DynValue containing a function which will execute the loaded code.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.LoadString(System.String,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads a string containing a Lua/MoonSharp script.
            </summary>
            <param name="code">The code.</param>
            <param name="globalTable">The global table to bind to this chunk.</param>
            <param name="codeFriendlyName">Name of the code - used to report errors, etc.</param>
            <returns>
            A DynValue containing a function which will execute the loaded code.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.LoadFile(System.String,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads a string containing a Lua/MoonSharp script.
            </summary>
            <param name="filename">The code.</param>
            <param name="globalContext">The global table to bind to this chunk.</param>
            <param name="friendlyFilename">The filename to be used in error messages.</param>
            <returns>
            A DynValue containing a function which will execute the loaded code.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.DoString(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Loads and executes a string containing a Lua/MoonSharp script.
            </summary>
            <param name="code">The code.</param>
            <param name="globalContext">The global context.</param>
            <returns>
            A DynValue containing the result of the processing of the loaded chunk.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.DoFile(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Loads and executes a file containing a Lua/MoonSharp script.
            </summary>
            <param name="filename">The filename.</param>
            <param name="globalContext">The global context.</param>
            <returns>
            A DynValue containing the result of the processing of the loaded chunk.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.RunFile(System.String)">
            <summary>
            Runs the specified file with all possible defaults for quick experimenting.
            </summary>
            <param name="filename">The filename.</param>
            A DynValue containing the result of the processing of the executed script.
        </member>
        <member name="M:MoonSharp.Interpreter.Script.RunString(System.String)">
            <summary>
            Runs the specified code with all possible defaults for quick experimenting.
            </summary>
            <param name="code">The Lua/MoonSharp code.</param>
            A DynValue containing the result of the processing of the executed script.
        </member>
        <member name="M:MoonSharp.Interpreter.Script.MakeClosure(System.Int32)">
            <summary>
            Creates a closure from a bytecode address.
            </summary>
            <param name="address">The address.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(MoonSharp.Interpreter.DynValue)">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called - callbacks are not supported.</param>
            <returns>
            The return value(s) of the function call.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue[])">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called - callbacks are not supported.</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns>
            The return value(s) of the function call.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(MoonSharp.Interpreter.DynValue,System.Object[])">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called - callbacks are not supported.</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns>
            The return value(s) of the function call.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(System.Object)">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called - callbacks are not supported.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(System.Object,System.Object[])">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called - callbacks are not supported.</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.CreateCoroutine(MoonSharp.Interpreter.DynValue)">
            <summary>
            Creates a coroutine pointing at the specified function.
            </summary>
            <param name="function">The function.</param>
            <returns>
            The coroutine handle.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function or DataType.ClrFunction</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.CreateCoroutine(System.Object)">
            <summary>
            Creates a coroutine pointing at the specified function.
            </summary>
            <param name="function">The function.</param>
            <returns>
            The coroutine handle.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function or DataType.ClrFunction</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.GetMainChunk">
            <summary>
            Gets the main chunk function.
            </summary>
            <returns>A DynValue containing a function which executes the first chunk that has been loaded.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.AttachDebugger(MoonSharp.Interpreter.Debugging.IDebugger)">
            <summary>
            Attaches a debugger. This usually should be called by the debugger itself and not by user code.
            </summary>
            <param name="debugger">The debugger object.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.GetSourceCode(System.Int32)">
            <summary>
            Gets the source code.
            </summary>
            <param name="sourceCodeID">The source code identifier.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.RequireModule(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Loads a module as per the "require" Lua function. http://www.lua.org/pil/8.1.html
            </summary>
            <param name="modname">The module name</param>
            <param name="globalContext">The global context.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">Raised if module is not found</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.GetTypeMetatable(MoonSharp.Interpreter.DataType)">
            <summary>
            Gets a type metatable.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.SetTypeMetatable(MoonSharp.Interpreter.DataType,MoonSharp.Interpreter.Table)">
            <summary>
            Sets a type metatable.
            </summary>
            <param name="type">The type. Must be Nil, Boolean, Number, String or Function</param>
            <param name="metatable">The metatable.</param>
            <exception cref="T:System.ArgumentException">Specified type not supported :  + type.ToString()</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.WarmUp">
            <summary>
            Warms up the parser/lexer structures so that MoonSharp operations start faster.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.CreateDynamicExpression(System.String)">
            <summary>
            Creates a new dynamic expression.
            </summary>
            <param name="code">The code of the expression.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.CreateConstantDynamicExpression(System.String,MoonSharp.Interpreter.DynValue)">
            <summary>
            Creates a new dynamic expression which is actually quite static, returning always the same constant value.
            </summary>
            <param name="code">The code of the not-so-dynamic expression.</param>
            <param name="constant">The constant to return.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.DefaultOptions">
            <summary>
            Gets or sets the script loader which will be used as the value of the
            ScriptLoader property for all newly created scripts.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.Options">
            <summary>
            Gets access to the script options. 
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.PerformanceStats">
            <summary>
            Gets access to performance statistics.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.Globals">
            <summary>
            Gets the default global table for this script. Unless a different table is intentionally passed (or setfenv has been used)
            execution uses this table.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.SourceCodeCount">
            <summary>
            Gets the source code count.
            </summary>
            <value>
            The source code count.
            </value>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.Registry">
            <summary>
            MoonSharp (like Lua itself) provides a registry, a predefined table that can be used by any CLR code to 
            store whatever Lua values it needs to store. 
            Any CLR code can store data into this table, but it should take care to choose keys 
            that are different from those used by other libraries, to avoid collisions. 
            Typically, you should use as key a string GUID, a string containing your library name, or a 
            userdata with the address of a CLR object in your code.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Table">
            <summary>
            A class representing a Lua table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.#ctor(MoonSharp.Interpreter.Script)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Table"/> class.
            </summary>
            <param name="owner">The owner script.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.GetIntegralKey(System.Double)">
            <summary>
            Gets the integral key from a double.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Set(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value associated to the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Get(MoonSharp.Interpreter.DynValue)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Set(System.String,MoonSharp.Interpreter.DynValue)">
            <summary>
             Sets the value associated to the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Get(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.RawGet(System.String)">
            <summary>
            Gets the value associated with the specified key, without bringing to Nil the non-existant values.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Set(System.Int32,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value associated to the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Get(System.Int32)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.CollectDeadKeys">
            <summary>
            Collects the dead keys.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.NextKey(MoonSharp.Interpreter.DynValue)">
            <summary>
            Returns the next pair from a value
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.OwnerScript">
            <summary>
            Gets the script owning this resource.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Item(System.Object,System.Object[])">
            <summary>
            Gets or sets the 
            <see cref="T:System.Object"/> with the specified key(s).
            This will marshall CLR and MoonSharp objects in the best possible way.
            Multiple keys can be used to access subtables.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <param name="subkeys">Optional subkeys to access subtables</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key(s).
            This will marshall CLR and MoonSharp objects in the best possible way.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Length">
            <summary>
            Gets the length of the "array part".
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.MetaTable">
            <summary>
            Gets the meta-table associated with this instance.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Pairs">
            <summary>
            Enumerates the key/value pairs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Keys">
            <summary>
            Enumerates the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Values">
            <summary>
            Enumerates the values
            </summary>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreModules">
            <summary>
            Enumeration (combinable as flags) of all the standard library modules
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Basic">
            <summary>
            The basic methods. Includes "assert", "collectgarbage", "error", "print", "select", "type", "tonumber" and "tostring".
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.GlobalConsts">
            <summary>
            The global constants: "_G", "_VERSION" and "_MOONSHARP".
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.TableIterators">
            <summary>
            The table iterators: "next", "ipairs" and "pairs".
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Metatables">
            <summary>
            The metatable methods : "setmetatable", "getmetatable", "rawset", "rawget", "rawequal" and "rawlen".
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.String">
            <summary>
            The string package
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.LoadMethods">
            <summary>
            The load methods: "load", "loadsafe", "loadfile", "loadfilesafe", "dofile" and "require"
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Table">
            <summary>
            The table package 
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.ErrorHandling">
            <summary>
            The error handling methods: "pcall" and "xpcall"
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Math">
            <summary>
            The math package
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Coroutine">
            <summary>
            The coroutine package
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Bit32">
            <summary>
            The bit32 package
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.OS_Time">
            <summary>
            The time methods of the "os" package: "clock", "difftime", "date" and "time"
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.OS_System">
            <summary>
            The methods of "os" package excluding those listed for OS_Time. These are not supported under Unity.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.IO">
            <summary>
            The methods of "io" and "file" packages. These are not supported under Unity.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Debug">
            <summary>
            The "debug" package (it has limited support)
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Dynamic">
            <summary>
            The "dynamic" package (introduced by MoonSharp).
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Preset_HardSandbox">
            <summary>
            A sort of "hard" sandbox preset, including string, math, table, bit32 packages, constants and table iterators.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Preset_SoftSandbox">
            <summary>
            A softer sandbox preset, adding metatables support, error handling, coroutine, time functions and dynamic evaluations.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Preset_Default">
            <summary>
            The default preset. Includes everything except "debug" as now.
            Beware that using this preset allows scripts unlimited access to the system.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Preset_Complete">
            <summary>
            The complete package.
            Beware that using this preset allows scripts unlimited access to the system.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.ScriptOptions">
            <summary>
            This class contains options to customize behaviour of Script objects.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.ScriptLoader">
            <summary>
            Gets or sets the script loader to use. A script loader wraps all code loading from files, so that access
            to the filesystem can be completely overridden.
            </summary>
            <value>
            The current script loader.
            </value>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.DebugPrint">
            <summary>
            Gets or sets the debug print handler
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.DebugInput">
            <summary>
            Gets or sets the debug input handler
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.UseLuaErrorLocations">
            <summary>
            Gets or sets a value indicating whether error messages will use Lua error locations instead of MoonSharp 
            improved ones. Use this for compatibility with legacy Lua code which parses error messages.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.CheckThreadAccess">
            <summary>
            Gets or sets a value indicating whether the thread check is enabled.
            A "lazy" thread check is performed everytime execution is entered to ensure that no two threads
            calls MoonSharp execution concurrently. However 1) the check is performed best effort (thus, it might
            not detect all issues) and 2) it might trigger in very odd legal situations (like, switching threads 
            inside a CLR-callback without actually having concurrency.
            
            Disable this option if the thread check is giving problems in your scenario, but please check that
            you are not calling MoonSharp execution concurrently as it is not supported.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Tree.Expressions.BinaryOperatorExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Tree.Expressions.BinaryOperatorExpression.CreateSubTree(Antlr4.Runtime.Tree.IParseTree,MoonSharp.Interpreter.Execution.ScriptLoadingContext)">
            <summary>
            Creates a sub tree of binary expressions
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Tree.Loader_Antlr">
            <summary>
            Class managing most of interactions with ANTLR.
            </summary>
        </member>
    </members>
</doc>
